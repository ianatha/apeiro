package main

import (
	"bufio"
	"fmt"
	"os"
	"reflect"
	"strings"
	"unicode"
	"unicode/utf8"

	"rogchap.com/v8go"
)

func lowerFirst(s string) string {
	if s == "" {
		return ""
	}
	r, n := utf8.DecodeRuneInString(s)
	return string(unicode.ToLower(r)) + s[n:]
}

func main() {
	t := reflect.TypeOf((*v8go.Value)(nil))

	var typeCheckMethods []string
	for i := 0; i < t.NumMethod(); i++ {
		method := t.Method(i)
		if method.Type.NumOut() == 1 {
			returnType := method.Type.Out(0)
			if returnType.Kind() == reflect.Bool {
				if strings.HasPrefix(method.Name, "Is") && method.Name != "IsTrue" && method.Name != "IsFalse" {
					typeCheckMethods = append(typeCheckMethods, method.Name)
				}
			}
		}
	}

	file, err := os.Create("value_types_cases.go")
	if err != nil {
		panic(err)
	}
	defer file.Close()
	w := bufio.NewWriter(file)
	fmt.Fprintf(w, "package debugging\n\n")
	fmt.Fprintf(w, "// this file is automatically generated by apeiro/build/value_types_generator\n\n")
	fmt.Fprintf(w, "import \"rogchap.com/v8go\"\n\n")
	fmt.Fprintf(w, "var VALUE_TYPES = []ValueTypeCase{\n")
	for _, typeCheckMethod := range typeCheckMethods {
		typeName := lowerFirst(strings.TrimPrefix(typeCheckMethod, "Is"))
		fmt.Fprintf(w, "\t{\"%s\", (*v8go.Value).%s},\n", typeName, typeCheckMethod)
	}
	fmt.Fprintf(w, "}\n")
	w.Flush()
}
